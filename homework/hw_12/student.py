"""
Создайте класс студента.
○ Используя дескрипторы проверяйте ФИО на первую заглавную букву и наличие только букв.
Если ФИО не соответствует условию, выведите:

ФИО должно состоять только из букв и начинаться с заглавной буквы

○ Названия предметов должны загружаться из файла CSV при создании экземпляра.
Другие предметы в экземпляре недопустимы. Если такого предмета нет, выведите:

Предмет {Название предмета} не найден

○ Для каждого предмета можно хранить оценки (от 2 до 5) и результаты тестов (от 0 до 100).
В противном случае выведите:

Оценка должна быть целым числом от 2 до 5
Результат теста должен быть целым числом от 0 до 100

○ Также экземпляр должен сообщать средний балл по тестам для каждого предмета и по оценкам
всех предметов вместе взятых.

Вам предоставлен файл subjects.csv, содержащий предметы, например:
Математика,Физика,История,Литература

Создайте класс Student, который будет представлять студента и его успехи по предметам.
Атрибуты класса:
name (str): ФИО студента.
subjects (dict): Словарь, который хранит предметы в качестве ключей и информацию об оценках
и результатах тестов для каждого предмета в виде словаря.
"""

import csv


class Student:
    """Класс Student, который представляет студента и его успехи по предметам."""

    def __init__(self, name, subjects_file):
        """
        Конструктор класса. Принимает имя студента и файл с предметами и их результатами.
        Инициализирует атрибуты name и subjects и вызывает метод load_subjects для загрузки предметов из файла.
        """
        self.name = name
        self.subjects = self.load_subjects(subjects_file)

    def __setattr__(self, name, value):
        """
        Дескриптор, который проверяет установку атрибута name.
        Убеждается, что name начинается с заглавной буквы и состоит только из букв.
        """
        if value.isalpha() and value[0].isupper():
            self.__dict__[name] = value
        else:
            print("ФИО должно состоять только из букв и начинаться с заглавной буквы")

    def __getattr__(self, name):
        """
        Позволяет получать значения атрибутов предметов (оценок и результатов тестов) по их именам.
        """
        pass

    def __str__(self):
        """
        Возвращает строковое представление студента, включая имя и список предметов.
        Студент: Иван Иванов
        Предметы: Математика, История
        """
        subjects = ""
        for key in self.subjects.keys():
            if subjects:
                subjects = subjects + ", " + key
        return f'Студент: {self.name}\nПредметы:{subjects}'

    def load_subjects(self, subjects_file):
        """
        Загружает предметы из файла CSV.
        Использует модуль csv для чтения данных из файла и добавляет предметы в атрибут subjects.
        """
        with open(subjects_file, encoding="utf-8") as csv_f:
            return dict(csv.reader(csv_f))

    def add_grade(self, subject, grade):
        """
        Добавляет оценку по заданному предмету. Убеждается, что оценка является целым числом от 2 до 5.
        """
        pass

    def add_test_score(self, subject, test_score):
        """
        Добавляет результат теста по заданному предмету.
        Убеждается, что результат теста является целым числом от 0 до 100.
        """
        pass

    def get_average_test_score(self, subject):
        """
        Возвращает средний балл по тестам для заданного предмета.
        """
        pass

    def get_average_grade(self):
        """
        Возвращает средний балл по всем предметам.
        """
        pass
